trigger:
- master
- develop
- release/*

# Don't trigger for a pull request
pr: none

variables:
  - group: CertificateVariables
  - group: CIAutomation
  # Access token for the git repository. Used by the git tag task.
  - group: InternalKeys
  - name: system_accesstoken
    value: $(System.AccessToken)
  # Include shared variables
  - template: shared-variables.yml

resources:
  repositories:
    - repository: ciTemplates # Id of the repository used to reference to in this script
      type: git
      name: common-ci # Name of the actual repository
 
stages:
- template: shared-build-binaries-stage.yml

# Stage to create packages, 
# copy binaries for Windows Linux and Mac created in previous stages,
# create and publish package using Linux platform 
- stage: Build_Packages
  displayName: Build Packages
  dependsOn: [Build_Binaries_Windows,Build_Binaries_MacOS,Build_Binaries_Linux_ARM,Build_Binaries_Linux]
  jobs:
  - template: shared-git-version-job.yml@ciTemplates
    parameters:
      imageName: $(linuxImage)

  - job: Create_Packages
    displayName: Create Packages
    dependsOn: Versioning
    condition: and(succeeded(), ne(variables['CreatePackages'], 'Off'))
    
    variables:
      GitVersionSemVer: $[ dependencies.Versioning.outputs['SetGitVersionVars.GitVersionSemVer'] ]
    
    pool:
      vmImage: $(linuxImage)
      
    steps:
      
    - checkout: self
      submodules: recursive
      lfs: true
      # The line below are needed to allow the pipeline access to the
      # OAuth access token that controls write access to the git repository.
      # (Required for GitTag task)
      persistCredentials: true

    - task: DownloadSecureFile@1
      displayName: 'Download Code Signing Certificate'
      name: CodeSigningCert
      inputs:
        secureFile: '51Degrees Private Code Signing Certificate.pfx'
        retryCount: 5
      continueOnError: true

    - template: java/shared-package-signing-steps.yml@ciTemplates
      parameters:
        gpgPassPhrase: $(JavaMavenGPGKeyPassphrase)

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Windows Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.dll'
        downloadPath: '$(build.sourcesdirectory)/binaries/'
        
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Mac Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.dylib'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Linux Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.so'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: Bash@3
      displayName: 'Make Hash Resources Directory'
      inputs:
        targetType: 'inline'
        script: 'mkdir $(build.sourcesdirectory)/device-detection.hash.engine.on-premise/src/main/resources'

    - task: Bash@3
      displayName: 'Move Hash Binaries'
      inputs:
        targetType: 'inline'
        script: 'mv $(build.sourcesdirectory)/binaries/*/*Hash* $(build.sourcesdirectory)/device-detection.hash.engine.on-premise/src/main/resources/'

    - task: MavenAuthenticate@0
      inputs:
        artifactsFeeds: '$(InternalFeedName)'

    - task: Maven@2
      displayName: 'Maven version set'
      inputs:
        goals: 'versions:set'
        options: '-DnewVersion=$(GitVersionSemVer)'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mavenAuthenticateFeed: false

    - task: Maven@1
      displayName: 'Maven install'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        options: '-Pbuild -Dhttps.protocols=TLSv1.2 -Dbuildversion=$(GitVersion.SemVer) -Dfetchrepository.id=$(fetchrepository.id) -Dfetchrepository.url=$(fetchrepository.url) -Dpublishrepository.id=$(publishrepository.id) -Dpublishrepository.url=$(publishrepository.url) -Dskippackagesign=false -Dgpg.passphrase=$(JavaMavenGPGKeyPassphrase) -Dkeystore="$(CodeSigningCert.secureFilePath)" -Dalias=$(CodeSigningCertAlias) -Dkeypass=$(CodeSigningCertPassword) -Dkeystorepass=$(CodeSigningCertPassword) -DcreateChecksum=true -Dexec.skip=true -DskipTests=true'
        jdkVersionOption: $(jdkVersionDefault)

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: Bash@3
      displayName: 'Write GitVersion to version.txt'
      inputs:
        targetType: 'inline'
        script: 'echo $(GitVersionSemVer) >> version.txt'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: 'version.txt'
        TargetFolder: '$(build.artifactstagingdirectory)'


    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'

  - template: shared-git-tag-job.yml@ciTemplates
    parameters:
      imageName: $(linuxImage)
      jobDependencies: [Versioning,Create_Packages]