parameters:
- name: plfTsVer
- name: winSDKVer

stages:

# Stage to create and publish binaries for Windows platforms 
- stage: Build_Binaries_Windows
  displayName: Build Binaries Windows
  dependsOn: []
  jobs: 
  - job: Build_Binaries_Windows
    displayName: Build Binaries Windows
    
    pool:
      vmImage: $(windowsImage)

    steps:

    - checkout: self
      submodules: recursive
      persistCredentials: true

    - template: shared-build-binaries.yml
      parameters:
        name: 'x86'
        cmakeArgs: '-A Win32 -DCMAKE_GENERATOR_TOOLSET=${{ parameters.plfTsVer }} -DCMAKE_SYSTEM_VERSION=${{ parameters.winSDKVer }}'
        buildArgs: '--config Release'
    - template: shared-build-binaries.yml
      parameters:
        name: 'x86_64'
        cmakeArgs: '-A x64 -DCMAKE_GENERATOR_TOOLSET=${{ parameters.plfTsVer }} -DCMAKE_SYSTEM_VERSION=${{ parameters.winSDKVer }}'
        buildArgs: '--config Release'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*windows-x*.dll'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: windows-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: windows-binaries

# Stage to create and publish binaries for Linux ARM platforms 
- stage: Build_Binaries_Linux_ARM
  displayName: Build Binaries Linux ARM
  dependsOn: []
  jobs: 
  - job: Build_Binaries_Linux_ARM
    displayName: Build Binaries Linux ARM
    
    pool:
      vmImage: $(linuxImage)

    steps:

    - checkout: self
      submodules: recursive
      persistCredentials: true

    - bash: |
        sudo apt-get update
        sudo apt-get -y install \
          gcc-arm-linux-gnueabihf \
          g++-arm-linux-gnueabihf \
          gcc-aarch64-linux-gnu \
          g++-aarch64-linux-gnu
      displayName: 'Install arm C/C++ compiler packages'

    - template: shared-build-binaries.yml
      parameters:
        name: 'armhf'
        cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=../device-detection.hash.engine.on-premise/src/main/cxx/device-detection-cxx/src/common-cxx/cmake/linux-armhf-cross.cmake'
    - template: shared-build-binaries.yml
      parameters:
        name: 'aarch64'
        cmakeArgs: '-DCMAKE_TOOLCHAIN_FILE=../device-detection.hash.engine.on-premise/src/main/cxx/device-detection-cxx/src/common-cxx/cmake/linux-aarch64-cross.cmake'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*linux-*.so'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: linux-arm-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: linux-arm-binaries


# Stage to create and publish binaries for Linux platforms 
- stage: Build_Binaries_Linux
  displayName: Build Binaries Linux
  dependsOn: []
  jobs: 
  - job: Build_Binaries_Linux
    displayName: Build Binaries Linux
    
    pool:
      vmImage: $(linuxImage)

    steps:

    - checkout: self
      submodules: recursive
      persistCredentials: true

    - bash: |
        sudo apt-get update
        sudo apt-get -y install \
          gcc-multilib \
          g++-multilib
      displayName: 'Install multilib C/C++ compiler packages'

    - template: shared-build-binaries.yml
      parameters:
        name: 'x86'
        cmakeArgs: '-D32bit=ON'
    - template: shared-build-binaries.yml
      parameters:
        name: 'x86_64'
        cmakeArgs: '-D32bit=OFF'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*linux-*.so'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: linux-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: linux-binaries

# Stage to create and publish binaries for MacOS ARM platform
- stage: Build_Binaries_MacOS_ARM
  displayName: Build Binaries MacOS ARM
  dependsOn: []
  jobs:
  - job: Build_Binaries_MacOS_ARM
    displayName: Build Binaries MacOS ARM
    
    pool:
      vmImage: $(macImage)

    steps:

    - checkout: self
      submodules: recursive

    - template: shared-build-binaries.yml
      parameters:
        name: 'arm64'
        cmakeArgs: '-D32bit=OFF -DCMAKE_TOOLCHAIN_FILE=../device-detection.hash.engine.on-premise/src/main/cxx/device-detection-cxx/src/common-cxx/cmake/mac-arm64-cross.cmake'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*mac*.dylib'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: mac-arm-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: mac-arm-binaries

# Stage to create and publish binaries for MacOS platform
- stage: Build_Binaries_MacOS
  displayName: Build Binaries MacOS
  dependsOn: []
  jobs:
  - job: Build_Binaries_MacOS
    displayName: Build Binaries MacOS
    
    pool:
      vmImage: $(macImage)

    steps:

    - checkout: self
      submodules: recursive

    - template: shared-build-binaries.yml
      parameters:
        name: 'x86_64'
        cmakeArgs: '-D32bit=OFF'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*mac*.dylib'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: mac-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: mac-binaries
