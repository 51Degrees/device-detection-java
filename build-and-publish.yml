trigger:
- master
- develop
- release/*

variables:
  - group: CertificateVariables
  # Access token for the git repository. Used by the git tag task.
  - name: system_accesstoken
    value: $(System.AccessToken)

stages:

- stage: Build_Windows
  dependsOn: []
  jobs:
  - job: Build
    pool:
      name: Default
      demands: msbuild
    steps:

    - checkout: self
      submodules: recursive
      persistCredentials: true

    - task: MSBuild@1
      displayName: 'Build Device Detection Engines x64'
      inputs:
        solution: 'VisualStudio/DeviceDetectionEngines.sln'
        msbuildArchitecture: x64
        platform: x64
        configuration: Release
        clean: true

    - task: MSBuild@1
      displayName: 'Build Device Detection Engines x86'
      inputs:
        solution: 'VisualStudio/DeviceDetectionEngines.sln'
        platform: x86
        configuration: Release

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*windows-x*.dll'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: windows-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: windows-binaries

- stage: Build_Mac
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'macOS-10.14'

    steps:

    - checkout: self
      submodules: recursive

    - task: ShellScript@2
      displayName: 'Build Pattern'
      inputs:
        scriptPath: 'PreBuild.sh'
        args: pattern

    - task: ShellScript@2
      displayName: 'Build Hash'
      inputs:
        scriptPath: 'PreBuild.sh'
        args: hash

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*mac*.so'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: mac-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: mac-binaries

- stage: Build_Linux
  dependsOn: [Build_Windows, Build_Mac]
  jobs:
  - job: Build
    pool:
      name: Linux
      demands: maven

    steps:

    - checkout: self
      submodules: recursive
      lfs: true
      # The line below are needed to allow the pipeline access to the
      # OAuth access token that controls write access to the git repository.
      # (Required for GitTag task)
      persistCredentials: true

    - task: gittools.gitversion.gitversion-task.GitVersion@5
      displayName: GitVersion
      inputs:
        preferBundledVersion: true

    # The secure file to download will be stored in the
    # Pipelines/Library/SecureFiles section in Azure DevOps.
    - task: DownloadSecureFile@1
      displayName: 'Download Code Signing Certificate'
      name: CodeSigningCert
      inputs:
        secureFile: '51Degrees Code Signing Certificate.asc'

    - task: Bash@3
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: 'echo $(gpg_passphrase) | gpg --import --batch --yes --passphrase-fd 0 "$(CodeSigningCert.secureFilePath)"'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Mac Pattern Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Pattern*.so'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Mac Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.so'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Windows Pattern Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Pattern*.dll'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Windows Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.dll'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: Bash@3
      displayName: 'Make Hash Resources Directory'
      inputs:
        targetType: 'inline'
        script: 'mkdir $(build.sourcesdirectory)/device-detection.hash.engine.on-premise/src/main/resources'

    - task: Bash@3
      displayName: 'Make Pattern Resources Directory'
      inputs:
        targetType: 'inline'
        script: 'mkdir $(build.sourcesdirectory)/device-detection.pattern.engine.on-premise/src/main/resources'

    - task: Bash@3
      displayName: 'Move Hash Binaries'
      inputs:
        targetType: 'inline'
        script: 'mv $(build.sourcesdirectory)/binaries/*/*Hash* $(build.sourcesdirectory)/device-detection.hash.engine.on-premise/src/main/resources/'

    - task: Bash@3
      displayName: 'Move Pattern Binaries'
      inputs:
        targetType: 'inline'
        script: 'mv $(build.sourcesdirectory)/binaries/*/*Pattern* $(build.sourcesdirectory)/device-detection.pattern.engine.on-premise/src/main/resources/'

    - task: MavenAuthenticate@0
      inputs:
        artifactsFeeds: 'pipeline-insider'

    - task: Maven@2
      displayName: 'Maven version set'
      inputs:
        goals: 'versions:set'
        options: '-DnewVersion=$(GitVersion.SemVer)'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mavenAuthenticateFeed: false

    - task: Maven@1
      displayName: 'Maven install'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        options: '-Pbuild -Dhttps.protocols=TLSv1.2 -Dbuildversion=$(GitVersion.SemVer) -Dfetchrepository.id=$(fetchrepository.id) -Dfetchrepository.url=$(fetchrepository.url) -Dpublishrepository.id=$(publishrepository.id) -Dpublishrepository.url=$(publishrepository.url) -Dgpg.passphrase=$(gpg_passphrase) -DcreateChecksum=true'
        javaHomeOption: Path
        jdkDirectory: '/usr/lib/jvm/java-7-openjdk-amd64/'

    - task: Maven@1
      displayName: 'Maven deploy internal'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: deploy
        options: '-Pbuild -Dhttps.protocols=TLSv1.2 -Dbuildversion=$(GitVersion.SemVer) -Dfetchrepository.id=$(fetchrepository.id) -Dfetchrepository.url=$(fetchrepository.url) -Dpublishrepository.id=$(publishrepository.id) -Dpublishrepository.url=$(publishrepository.url) -Dgpg.passphrase=$(gpg_passphrase)'
        publishJUnitResults: false
        javaHomeOption: Path
        jdkDirectory: '/usr/lib/jvm/java-7-openjdk-amd64/'

    - task: DownloadSecureFile@1
      displayName: 'Download Staging settings.xml'
      name: stagingsettings
      inputs:
        secureFile: 'stagingsettings.xml'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'cp $(stagingsettings.secureFilePath) /tmp/settings.xml'
        
    - task: Maven@1
      displayName: 'Maven deploy staging'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: deploy
        options: '-Pbuild -Dhttps.protocols=TLSv1.2 -Dbuildversion=$(GitVersion.SemVer) -Dfetchrepository.id=$(fetchrepository.id) -Dfetchrepository.url=$(fetchrepository.url) -Dgpg.passphrase=$(gpg_passphrase)'
        publishJUnitResults: false
        javaHomeOption: Path
        jdkDirectory: '/usr/lib/jvm/java-7-openjdk-amd64/'

    # Add a tag to the git repository with the version number of
    # the package that has just been published
    - task: ATP.ATP-GitTag.GitTag.GitTag@5
      displayName: 'Tag Repo With Version Number'
      inputs:
        tagUser: 'Azure DevOps'
        tagEmail: 'CIUser@51Degrees.com'
        tag: 'v$(GitVersion.SemVer)'
      # Only create the tag if we also published a package as defined in
      # the previous task.
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq('true', variables['ForcePushMaven'])))))

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*.jar'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'