trigger:
- master
- develop
- release/*

variables:
  - group: CertificateVariables
  # Access token for the git repository. Used by the git tag task.
  - name: system_accesstoken
    value: $(System.AccessToken)

stages:

- stage: Build_Windows
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'vs2017-win2016'

    steps:

    - checkout: self
      submodules: recursive
      persistCredentials: true

    - task: MSBuild@1
      displayName: 'Build Device Detection Engines x64'
      inputs:
        solution: 'VisualStudio/DeviceDetectionEngines.sln'
        msbuildArchitecture: x64
        platform: x64
        configuration: Release
        clean: true

    - task: MSBuild@1
      displayName: 'Build Device Detection Engines x86'
      inputs:
        solution: 'VisualStudio/DeviceDetectionEngines.sln'
        platform: x86
        configuration: Release

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*windows-x*.dll'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: windows-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: windows-binaries

- stage: Build_Mac
  dependsOn: []
  jobs:
  - job: Build
    pool:
      vmImage: 'macOS-10.14'

    steps:

    - checkout: self
      submodules: recursive

    - task: ShellScript@2
      displayName: 'Build Hash'
      inputs:
        scriptPath: 'PreBuild.sh'
        args: hash

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*mac*.so'
        TargetFolder: '$(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        flattenFolders: true

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: mac-binaries'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        ArtifactName: mac-binaries

- stage: Build_Linux
  dependsOn: [Build_Windows, Build_Mac]
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-16.04'

    steps:

    - bash: |
    - script: |
        curl "https://distributor.51degrees.com/api/v2/download?LicenseKeys=$(licensekey)&Type=HashV41&Download=True&Product=V4Enterprise" --output Enterprise-HashV41.hash.gz
      displayName: 'Download Enterprise Data File'
      
    - checkout: self
      submodules: recursive
      lfs: true
      # The line below are needed to allow the pipeline access to the
      # OAuth access token that controls write access to the git repository.
      # (Required for GitTag task)
      persistCredentials: true

    - task: gittools.gitversion.gitversion-task.GitVersion@5
      displayName: GitVersion
      inputs:
        preferBundledVersion: true

    # The secure file to download will be stored in the
    # Pipelines/Library/SecureFiles section in Azure DevOps.
    - task: DownloadSecureFile@1
      displayName: 'Download Code Signing Certificate'
      name: CodeSigningCert
      inputs:
        secureFile: '51Degrees Code Signing Certificate.asc'

    - task: Bash@3
      continueOnError: true
      inputs:
        targetType: 'inline'
        script: 'echo $(gpg_passphrase) | gpg --import --batch --yes --passphrase-fd 0 "$(CodeSigningCert.secureFilePath)"'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Mac Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.so'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts - Windows Hash Binaries'
      inputs:
        downloadType: specific
        itemPattern: '**/*Hash*.dll'
        downloadPath: '$(build.sourcesdirectory)/binaries/'

    - task: Bash@3
      displayName: 'Make Hash Resources Directory'
      inputs:
        targetType: 'inline'
        script: 'mkdir $(build.sourcesdirectory)/device-detection.hash.engine.on-premise/src/main/resources'

    - task: Bash@3
      displayName: 'Move Hash Binaries'
      inputs:
        targetType: 'inline'
        script: 'mv $(build.sourcesdirectory)/binaries/*/*Hash* $(build.sourcesdirectory)/device-detection.hash.engine.on-premise/src/main/resources/'

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Data Files'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'enterpriseFile'
        downloadPath: '$(System.ArtifactsDirectory)'

    - script: |   
          mv $(System.ArtifactsDirectory)/enterpriseFile/Enterprise-HashV41.hash  $(Build.SourcesDirectory)/device-detection-cxx/device-detection-data/Enterprise-HashV41.hash
      displayName: 'Move Data Files'
      
    - bash: |
        sudo apt-get update
        sudo apt-get -y install \
          gcc-multilib \
          g++-multilib
      displayName: 'Install gcc-multilib and g++-multilib packages'
      
    - task: MavenAuthenticate@0
      inputs:
        artifactsFeeds: 'pipeline-insider'

    - task: Maven@2
      displayName: 'Maven version set'
      inputs:
        goals: 'versions:set'
        options: '-DnewVersion=$(GitVersion.SemVer)'
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        mavenAuthenticateFeed: false

    - task: Maven@1
      displayName: 'Maven install'
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install'
        options: '-Pbuild -Dhttps.protocols=TLSv1.2 -Dbuildversion=$(GitVersion.SemVer) -Dfetchrepository.id=$(fetchrepository.id) -Dfetchrepository.url=$(fetchrepository.url) -Dpublishrepository.id=$(publishrepository.id) -Dpublishrepository.url=$(publishrepository.url) -Dskippackagesign=false -Dgpg.passphrase=$(gpg_passphrase) -DcreateChecksum=true'
        jdkVersionOption: '1.8'

    # Add a tag to the git repository with the version number of
    # the package that has just been published
    - task: ATP.ATP-GitTag.GitTag.GitTag@5
      displayName: 'Tag Repo With Version Number'
      inputs:
        tagUser: 'Azure DevOps'
        tagEmail: 'CIUser@51Degrees.com'
      # Only create the tag if we also published a package as defined in
      # the previous task.
      condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq('true', variables['ForcePushMaven'])))))

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: '**/*'
        TargetFolder: '$(build.artifactstagingdirectory)'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'echo $(GitVersion.SemVer) >> version.txt'

    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)'
        Contents: 'version.txt'
        TargetFolder: '$(build.artifactstagingdirectory)'


    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
